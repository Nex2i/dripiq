import { z } from 'zod';
import { logger } from '@/libs/logger';

/**
 * Schema for a single email's content generated by the AI.
 * Contains the subject line, body, and the ID that maps to the static campaign template.
 */
export const emailContentSchema = z.object({
  id: z
    .string()
    .min(1)
    .describe('Node ID from the static campaign template that this email content is for'),
  subject: z
    .string()
    .min(1)
    .max(200)
    .describe('Email subject line - should be compelling and personalized'),
  body: z
    .string()
    .min(10)
    .max(5000)
    .describe(
      'Email body content - should be personalized, engaging, and include a clear value proposition'
    ),
});

/**
 * Schema for the complete output from the ContactStrategyAgent.
 * Contains an array of email content objects that will be mapped to the static campaign template.
 */
export const emailContentOutputSchema = z.object({
  emails: z
    .array(emailContentSchema)
    .min(1)
    .max(15)
    .describe(
      'Array of email content objects, each containing subject, body, and template node ID'
    ),

  // Optional metadata for debugging and analytics
  metadata: z
    .object({
      totalEmails: z.number().describe('Total number of emails generated'),
      personalizationLevel: z
        .enum(['low', 'medium', 'high'])
        .optional()
        .describe('Assessed level of personalization achieved'),
      primaryValueProposition: z
        .string()
        .optional()
        .describe('Main value proposition used across the email sequence'),
    })
    .optional()
    .describe('Optional metadata about the generated email content'),
});

/**
 * Type definitions for use throughout the application
 */
export type EmailContent = z.infer<typeof emailContentSchema>;
export type EmailContentOutput = z.infer<typeof emailContentOutputSchema>;

/**
 * Validation helper to ensure email content matches expected node IDs
 */
export function validateEmailContentIds(
  emailContent: EmailContentOutput,
  expectedNodeIds: string[]
): { isValid: boolean; errors: string[] } {
  const errors: string[] = [];
  const providedIds = emailContent.emails.map((email) => email.id);

  // Check for duplicate IDs
  const duplicateIds = providedIds.filter((id, index) => providedIds.indexOf(id) !== index);
  if (duplicateIds.length > 0) {
    errors.push(`Duplicate email IDs found: ${duplicateIds.join(', ')}`);
  }

  // Check for invalid IDs (not in expected list)
  const invalidIds = providedIds.filter((id) => !expectedNodeIds.includes(id));
  if (invalidIds.length > 0) {
    errors.push(`Invalid email IDs (not in template): ${invalidIds.join(', ')}`);
  }

  // Check for missing required IDs (we don't require all IDs, but we could warn)
  const missingIds = expectedNodeIds.filter((id) => !providedIds.includes(id));
  if (missingIds.length > 0) {
    // This is just a warning, not an error - AI may not generate content for all possible emails
    console.warn(`Missing email content for template IDs: ${missingIds.join(', ')}`);
  }

  return {
    isValid: errors.length === 0,
    errors,
  };
}

/**
 * Filter function to remove invalid email IDs and log errors
 * This provides a safety net for non-deterministic AI behavior
 */
export function filterAndLogInvalidEmailIds(
  emailContent: EmailContentOutput,
  expectedNodeIds: string[]
): EmailContentOutput {
  const originalEmails = emailContent.emails;
  const validEmails = originalEmails.filter((email) => expectedNodeIds.includes(email.id));
  const invalidEmails = originalEmails.filter((email) => !expectedNodeIds.includes(email.id));

  if (invalidEmails.length > 0) {
    logger.error('AI generated invalid email IDs - filtering them out', {
      invalidIds: invalidEmails.map((e) => e.id),
      validIds: validEmails.map((e) => e.id),
      expectedIds: expectedNodeIds,
      totalOriginal: originalEmails.length,
      totalFiltered: validEmails.length,
      removedCount: invalidEmails.length,
    });
  }

  // Check if we have at least some valid emails after filtering
  if (validEmails.length === 0) {
    logger.error('All AI-generated emails were invalid - no valid content remaining', {
      originalIds: originalEmails.map((e) => e.id),
      expectedIds: expectedNodeIds,
    });
  }

  return {
    ...emailContent,
    emails: validEmails,
    metadata: {
      ...emailContent.metadata,
      totalEmails: validEmails.length,
    },
  };
}

/**
 * Helper to create a default email content object
 */
export function createDefaultEmailContent(
  nodeId: string,
  subject: string = 'Follow-up',
  body: string = 'Thank you for your time. I wanted to follow up on our previous conversation.'
): EmailContent {
  return {
    id: nodeId,
    subject,
    body,
  };
}

/**
 * Example email content output for documentation
 */
export const EXAMPLE_EMAIL_CONTENT_OUTPUT: EmailContentOutput = {
  emails: [
    {
      id: 'email_intro',
      subject: 'Quick question about [Company] growth initiatives',
      body: "Hi [Name],\n\nI noticed [Company] recently expanded into [market/vertical]. Given your role as [Title], I imagine you're focused on scaling operations efficiently.\n\nWe've helped similar companies in [industry] reduce operational costs by 30% while accelerating growth. Would you be open to a brief conversation about how this might apply to [Company]?\n\nBest regards,\n[Sender Name]",
    },
    {
      id: 'email_followup_1',
      subject: 'Re: Growth initiatives at [Company]',
      body: "Hi [Name],\n\nI know your inbox is probably flooded, so I'll keep this brief.\n\nLast week I reached out about helping [Company] optimize operations during your expansion. Since then, I came across [specific company insight/news] and thought this might be even more relevant now.\n\nWorth a 15-minute conversation?\n\nBest,\n[Sender Name]",
    },
    {
      id: 'email_value_add_1',
      subject: '[Resource] Scaling operations in [Industry]',
      body: "Hi [Name],\n\nSince you're leading growth at [Company], I thought you might find this relevant: [specific insight/resource related to their industry].\n\nThis is the exact framework that helped [similar company] achieve [specific result] in just [timeframe].\n\nNo agenda here - just thought it might be useful for your current initiatives.\n\nCheers,\n[Sender Name]",
    },
  ],
  metadata: {
    totalEmails: 3,
    personalizationLevel: 'high',
    primaryValueProposition: 'Operational efficiency and cost reduction during growth phases',
  },
};
