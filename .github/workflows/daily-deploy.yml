name: Daily Deploy to Render

on:
  schedule:
    # Runs every day at 2:00 AM Central Time (7:00 AM UTC)
    - cron: '0 7 * * *'
  workflow_dispatch: # Allow manual triggering for testing

jobs:
  setup-client:
    name: Setup Client Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.package-hash.outputs.hash }}
    defaults:
      run:
        working-directory: client
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: client/package-lock.json
      - name: Get package-lock hash
        id: package-hash
        run: echo "hash=$(sha256sum package-lock.json | cut -d' ' -f1)" >> $GITHUB_OUTPUT
      - name: Install dependencies
        run: npm ci
      - name: Cache node_modules
        uses: actions/upload-artifact@v4
        with:
          name: client-node-modules-${{ steps.package-hash.outputs.hash }}
          path: client/node_modules
          retention-days: 1

  setup-server:
    name: Setup Server Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.package-hash.outputs.hash }}
    defaults:
      run:
        working-directory: server
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: server/package-lock.json
      - name: Get package-lock hash
        id: package-hash
        run: echo "hash=$(sha256sum package-lock.json | cut -d' ' -f1)" >> $GITHUB_OUTPUT
      - name: Install dependencies
        run: npm ci
      - name: Cache node_modules
        uses: actions/upload-artifact@v4
        with:
          name: server-node-modules-${{ steps.package-hash.outputs.hash }}
          path: server/node_modules
          retention-days: 1

  setup-landing:
    name: Setup Landing Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.package-hash.outputs.hash }}
    defaults:
      run:
        working-directory: landing
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: landing/package-lock.json
      - name: Get package-lock hash
        id: package-hash
        run: echo "hash=$(sha256sum package-lock.json | cut -d' ' -f1)" >> $GITHUB_OUTPUT
      - name: Install dependencies
        run: npm ci
      - name: Cache node_modules
        uses: actions/upload-artifact@v4
        with:
          name: landing-node-modules-${{ steps.package-hash.outputs.hash }}
          path: landing/node_modules
          retention-days: 1

  frontend-check:
    name: Frontend Check
    runs-on: ubuntu-latest
    needs: setup-client
    defaults:
      run:
        working-directory: client
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Download dependencies
        uses: actions/download-artifact@v4
        with:
          name: client-node-modules-${{ needs.setup-client.outputs.cache-key }}
          path: client/node_modules
      - name: Check
        run: npm run check

  frontend-test:
    name: Frontend Test
    runs-on: ubuntu-latest
    needs: setup-client
    defaults:
      run:
        working-directory: client
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Download dependencies
        uses: actions/download-artifact@v4
        with:
          name: client-node-modules-${{ needs.setup-client.outputs.cache-key }}
          path: client/node_modules
      - name: Test
        run: npm run test

  backend-check:
    name: Backend Check
    runs-on: ubuntu-latest
    needs: setup-server
    defaults:
      run:
        working-directory: server
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Download dependencies
        uses: actions/download-artifact@v4
        with:
          name: server-node-modules-${{ needs.setup-server.outputs.cache-key }}
          path: server/node_modules
      - name: Check
        run: npm run check

  backend-test:
    name: Backend Test
    runs-on: ubuntu-latest
    needs: setup-server
    defaults:
      run:
        working-directory: server
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Download dependencies
        uses: actions/download-artifact@v4
        with:
          name: server-node-modules-${{ needs.setup-server.outputs.cache-key }}
          path: server/node_modules
      - name: Ensure test env file exists
        run: |
          mkdir -p config
          [ -f config/.env.test ] || touch config/.env.test
      - name: Test
        env:
          ENV_FILE: ./config/.env.test
        run: npm run test

  client-build:
    name: Client Build
    runs-on: ubuntu-latest
    needs: setup-client
    defaults:
      run:
        working-directory: client
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Download dependencies
        uses: actions/download-artifact@v4
        with:
          name: client-node-modules-${{ needs.setup-client.outputs.cache-key }}
          path: client/node_modules
      - name: Build
        run: npm run build

  server-build:
    name: Server Build
    runs-on: ubuntu-latest
    needs: setup-server
    defaults:
      run:
        working-directory: server
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Download dependencies
        uses: actions/download-artifact@v4
        with:
          name: server-node-modules-${{ needs.setup-server.outputs.cache-key }}
          path: server/node_modules
      - name: Build
        run: npm run build

  landing-check:
    name: Landing Check
    runs-on: ubuntu-latest
    needs: setup-landing
    defaults:
      run:
        working-directory: landing
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Download dependencies
        uses: actions/download-artifact@v4
        with:
          name: landing-node-modules-${{ needs.setup-landing.outputs.cache-key }}
          path: landing/node_modules
      - name: Check
        run: npm run check

  landing-build:
    name: Landing Build
    runs-on: ubuntu-latest
    needs: setup-landing
    defaults:
      run:
        working-directory: landing
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Download dependencies
        uses: actions/download-artifact@v4
        with:
          name: landing-node-modules-${{ needs.setup-landing.outputs.cache-key }}
          path: landing/node_modules
      - name: Build
        run: npm run build

  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: [setup-client, setup-server, setup-landing, frontend-check, frontend-test, backend-check, backend-test, client-build, server-build, landing-check, landing-build]
    
    steps:
      - name: Trigger Render Deploy Hook
        run: |
          echo "All validation checks passed. Triggering Render deployment..."
          response=$(curl -s -w "HTTP_STATUS:%{http_code}" -X POST "${{ secrets.RENDER_DEPLOY_URL }}")
          http_status=$(echo "$response" | grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2)
          
          if [[ "$http_status" -ge 200 && "$http_status" -lt 300 ]]; then
            echo "✅ Deploy hook triggered successfully (HTTP $http_status)"
          else
            echo "❌ Deploy hook failed (HTTP $http_status)"
            echo "Response: $response"
            exit 1
          fi