---
description:
globs:
alwaysApply: false
---
# Database Schema & Authentication Patterns

## 🗄 Database Architecture - Drizzle ORM

### Schema Overview
The database schema in [server/src/db/schema.ts](mdc:server/src/db/schema.ts) implements a **multi-tenant architecture**:

```sql
-- Core entities
Users (id, supabaseId, email, name, avatar)
Tenants (id, name)  
UserTenants (userId, tenantId, isSuperUser) -- Many-to-many with permissions
```

### Key Schema Patterns
- **CUID2 IDs**: Generated via `createId()` for all primary keys
- **Custom Schema**: Uses `pgSchema(DATABASE_SCHEMA)` for namespace isolation
- **Timestamps**: Automatic `createdAt` and `updatedAt` fields
- **Cascading deletes**: Proper foreign key constraints
- **Unique constraints**: Email uniqueness, user-tenant relationships

### Type Inference
Drizzle provides automatic TypeScript types:
```typescript
export type User = typeof users.$inferSelect
export type NewUser = typeof users.$inferInsert
export type Tenant = typeof tenants.$inferSelect
export type NewTenant = typeof tenants.$inferInsert
```

## 🔄 Migration Management

### Migration Workflow
Database migrations are managed in [server/src/db/migrations/](mdc:server/src/db/migrations/):
- **0000_init.sql**: Initial schema creation
- **_journal.json**: Migration metadata and history
- **Snapshot files**: Schema state for each migration

### Migration Commands
```bash
# Generate new migration based on schema changes
npm run db:generate -- --name "add_new_feature"

# Apply pending migrations
npm run db:migrate

# Push schema directly (development only)
npm run db:push

# Open visual database browser
npm run db:studio
```

### Database Configuration
Configuration in [server/drizzle.config.ts](mdc:server/drizzle.config.ts):
- **Connection string**: From `DATABASE_URL` environment variable
- **Migration directory**: `src/db/migrations`
- **Schema file**: `src/db/schema.ts`
- **Dialect**: PostgreSQL

## 🔐 Authentication Architecture

### Dual Authentication System
The app uses **Supabase for authentication** + **custom user management**:

1. **Supabase**: Handles auth tokens, sessions, password reset
2. **Custom DB**: Stores user profiles, tenant relationships, permissions

### Authentication Flow

#### Registration Process
1. Create user in Supabase ([server/src/routes/authentication.routes.ts](mdc:server/src/routes/authentication.routes.ts))
2. Create tenant in custom database  
3. Create user profile in custom database
4. Link user to tenant with super-user permissions
5. Auto sign-in and return session

#### Login Process
1. Authenticate with Supabase
2. Fetch user profile from custom database
3. Return combined user data + session

### Auth Service Integration
Frontend auth service in [client/src/services/auth.service.ts](mdc:client/services/auth.service.ts):
- **Supabase client**: Direct auth operations
- **API integration**: Fetch user profile from backend
- **Session management**: Automatic refresh and persistence
- **Event listeners**: Auth state change handling

### Protected Route Pattern
Backend route protection:
```typescript
// Add auth preHandler to protect routes
fastify.route({
  method: 'GET',
  url: '/protected-endpoint',
  preHandler: [fastify.authPrehandler],
  handler: async (request, reply) => {
    // Access authenticated user via request.user
    const userId = request.user.id
  }
})
```

Frontend route protection in [client/src/components/AuthGuard.tsx](mdc:client/src/components/AuthGuard.tsx):
- **AuthGuard**: Redirects to login if not authenticated
- **PublicOnlyGuard**: Redirects to dashboard if already authenticated

## 🏢 Multi-Tenant Data Model

### Tenant Relationship
- **Users**: Can belong to multiple tenants
- **Tenants**: Can have multiple users
- **Permissions**: Per-tenant user permissions (super user flag)
- **Data Isolation**: Tenant-scoped data access patterns

### Service Layer Pattern
User and tenant operations in [server/src/modules/](mdc:server/src/modules/):

```typescript
// Example: Add user to tenant
await TenantService.addUserToTenant(userId, tenantId, isSuperUser)

// Example: Get user's tenants
const userTenants = await UserService.getUserTenants(userId)
```

## 🔧 Database Client Usage

### Connection Setup
Database client in [server/src/db/index.ts](mdc:server/src/db/index.ts):
- **Connection pooling** with postgres driver  
- **Environment-based configuration**
- **Error handling** for connection issues

### Query Patterns
```typescript
// Insert with returning
const [user] = await db.insert(users).values(userData).returning()

// Query builder with relations
const userWithTenants = await db.query.users.findFirst({
  where: eq(users.id, userId),
  with: {
    tenants: {
      with: {
        tenant: true
      }
    }
  }
})

// Raw SQL when needed
const result = await db.execute(sql`SELECT * FROM custom_view`)
```

## 🌱 Database Seeding

### Seed Configuration
Seeding logic in [server/src/db/seed.ts](mdc:server/src/db/seed.ts):
- **Environment check**: Only runs in development
- **Data cleanup**: Optional fresh seed with `CLEAR_DB=true`
- **Sample data**: Creates demo users, tenants, and relationships

### Seed Commands
```bash
# Seed with existing data
npm run db:seed

# Fresh seed (clears and rebuilds)
npm run db:seed:fresh

# Full deploy (migrate + seed)
npm run db:deploy
```

## 🔍 Development Tools

### Drizzle Studio
Visual database browser:
```bash
npm run db:studio
# Opens web interface for browsing/editing data
```

### Environment Variables
Required database environment variables:
```env
DATABASE_URL="postgresql://user:pass@localhost:5432/dbname"
DATABASE_SCHEMA="public"  # Optional custom schema
```
